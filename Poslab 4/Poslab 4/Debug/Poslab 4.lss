
Poslab 4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000002ee  00000382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800110  00800110  00000392  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000392  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000091a  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000782  00000000  00000000  00000d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000407  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  000018f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000457  00000000  00000000  00001a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000237  00000000  00000000  00001e73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000020aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ee       	ldi	r30, 0xEE	; 238
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  9e:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
	}
}

void initADC(void) //Funcion para inicializar el ADC
{
	ADMUX = 0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	
	ADMUX |= (1<<REFS0); //conectamos a AVcc
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  b2:	80 81       	ld	r24, Z
  b4:	8f 77       	andi	r24, 0x7F	; 127
  b6:	80 83       	st	Z, r24
	
	ADMUX |= 0b00000110; //Seleccionamos A6
  b8:	80 81       	ld	r24, Z
  ba:	86 60       	ori	r24, 0x06	; 6
  bc:	80 83       	st	Z, r24
	
	ADMUX |= (1<<ADLAR); // Justificado a la izquierda
  be:	80 81       	ld	r24, Z
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADEN); //Encendemos el ADC
  c4:	ea e7       	ldi	r30, 0x7A	; 122
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIE); // Encendemos el interrupt
  ce:	80 81       	ld	r24, Z
  d0:	88 60       	ori	r24, 0x08	; 8
  d2:	80 83       	st	Z, r24
	ADCSRA |= (0b00000111); //Prescaler de 128
  d4:	80 81       	ld	r24, Z
  d6:	87 60       	ori	r24, 0x07	; 7
  d8:	80 83       	st	Z, r24
  da:	08 95       	ret

000000dc <setup>:
char counter = 0;
char debouncetimer = 0;

void setup(void)
{
	cli();
  dc:	f8 94       	cli

	DDRB = 0b00100111; //Colocamos a B0-2 como salidas, B3y4 como entrads
  de:	87 e2       	ldi	r24, 0x27	; 39
  e0:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00011000; //Habilitamos pullups en 3 y 4
  e2:	98 e1       	ldi	r25, 0x18	; 24
  e4:	95 b9       	out	0x05, r25	; 5
	
	PCICR = 0x01;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK0 = 0b00011000; // Habilitamos pin interrupt en PB3 y PB4
  ec:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	
	DDRD = 0xFF; //Colocamos a todo D como salidas
  f0:	9f ef       	ldi	r25, 0xFF	; 255
  f2:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0;
  f4:	1b b8       	out	0x0b, r1	; 11
	
	UCSR0B = 0; // Deshablitamos serial en D0 y D1
  f6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	TCCR0B = 0b00000101; // Le colocamos un prescaler de 1024 a Timer 0
  fa:	95 e0       	ldi	r25, 0x05	; 5
  fc:	95 bd       	out	0x25, r25	; 37
	TCNT0 = timer0restart;
  fe:	95 ef       	ldi	r25, 0xF5	; 245
 100:	96 bd       	out	0x26, r25	; 38
	
	TIMSK0 = 0x01; // habilitamos interrupt en TIMR0 overflow
 102:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	
	initADC();
 106:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	
	sei();
 10a:	78 94       	sei
 10c:	08 95       	ret

0000010e <main>:
}

int main(void)
{
	setup();
 10e:	0e 94 6e 00 	call	0xdc	; 0xdc <setup>
	while (1)
	{
		ADCSRA |= (1<<ADSC); //reiniciamos el ADC
 112:	ea e7       	ldi	r30, 0x7A	; 122
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	80 64       	ori	r24, 0x40	; 64
 11a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	81 ee       	ldi	r24, 0xE1	; 225
 120:	94 e0       	ldi	r25, 0x04	; 4
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x14>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x1e>
 12c:	00 00       	nop
 12e:	f1 cf       	rjmp	.-30     	; 0x112 <main+0x4>

00000130 <__vector_3>:
	
	return;
	
}

ISR(PCINT0_vect){
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	8f 93       	push	r24
	
	if (debouncetimer != 0) {return;}
 13c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 140:	81 11       	cpse	r24, r1
 142:	19 c0       	rjmp	.+50     	; 0x176 <__vector_3+0x46>
	
	if ((PINB & 0b00011000) == 0b00010000) { //Aumentamos si el bit de incrementos esta apachado
 144:	83 b1       	in	r24, 0x03	; 3
 146:	88 71       	andi	r24, 0x18	; 24
 148:	80 31       	cpi	r24, 0x10	; 16
 14a:	49 f4       	brne	.+18     	; 0x15e <__vector_3+0x2e>
		counter--;
 14c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <counter>
 150:	81 50       	subi	r24, 0x01	; 1
 152:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <counter>
		debouncetimer = 0xFF;
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 15c:	0c c0       	rjmp	.+24     	; 0x176 <__vector_3+0x46>

	}
	
	else if ((PINB & 0b00011000) == 0b00001000) {
 15e:	83 b1       	in	r24, 0x03	; 3
 160:	88 71       	andi	r24, 0x18	; 24
 162:	88 30       	cpi	r24, 0x08	; 8
 164:	41 f4       	brne	.+16     	; 0x176 <__vector_3+0x46>
		counter++;
 166:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <counter>
 16a:	8f 5f       	subi	r24, 0xFF	; 255
 16c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <counter>
		debouncetimer = 0xFF;
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>

	}
	
	return;
	
}
 176:	8f 91       	pop	r24
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <changesomebits>:
	TIFR0 |= (1 << TOV0);
	return;
}

char changesomebits(char oldvalue, char bitstochange, char newvalue) //Funcion para solo cambiar algunos bits en un registro
{	char result = (newvalue & bitstochange) | (oldvalue & ~bitstochange);
 182:	96 2f       	mov	r25, r22
 184:	90 95       	com	r25
 186:	89 23       	and	r24, r25
 188:	64 23       	and	r22, r20
	return result;
}
 18a:	86 2b       	or	r24, r22
 18c:	08 95       	ret

0000018e <__vector_21>:
	ADCSRA |= (1<<ADEN); //Encendemos el ADC
	ADCSRA |= (1<<ADIE); // Encendemos el interrupt
	ADCSRA |= (0b00000111); //Prescaler de 128
}

ISR(ADC_vect){
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	2f 93       	push	r18
 19a:	3f 93       	push	r19
 19c:	4f 93       	push	r20
 19e:	5f 93       	push	r21
 1a0:	6f 93       	push	r22
 1a2:	7f 93       	push	r23
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	af 93       	push	r26
 1aa:	bf 93       	push	r27
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
	ADCResult = ADCH;
 1b0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1b4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <ADCResult>
	ADCSRA |= (1<<ADIF);
 1b8:	ea e7       	ldi	r30, 0x7A	; 122
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	80 61       	ori	r24, 0x10	; 16
 1c0:	80 83       	st	Z, r24
	
	unidades = (ADCResult & 0x0F); // grabamos los valores de unidades y decenas en sus lugares respectivos
 1c2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <ADCResult>
 1c6:	98 2f       	mov	r25, r24
 1c8:	9f 70       	andi	r25, 0x0F	; 15
 1ca:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <unidades>
	decenas = (ADCResult >> 4);
 1ce:	98 2f       	mov	r25, r24
 1d0:	92 95       	swap	r25
 1d2:	9f 70       	andi	r25, 0x0F	; 15
 1d4:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <decenas>
	
	//Usamos este if else para encender y apagar el alarma en PB6
	if (ADCResult > counter) {PORTB = changesomebits(PORTB, 0b00100000, 0xF0);} 
 1d8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <counter>
 1dc:	98 17       	cp	r25, r24
 1de:	38 f4       	brcc	.+14     	; 0x1ee <__vector_21+0x60>
 1e0:	85 b1       	in	r24, 0x05	; 5
 1e2:	40 ef       	ldi	r20, 0xF0	; 240
 1e4:	60 e2       	ldi	r22, 0x20	; 32
 1e6:	0e 94 c1 00 	call	0x182	; 0x182 <changesomebits>
 1ea:	85 b9       	out	0x05, r24	; 5
 1ec:	06 c0       	rjmp	.+12     	; 0x1fa <__vector_21+0x6c>
		else {PORTB = changesomebits(PORTB, 0b00100000, 0x00);}
 1ee:	85 b1       	in	r24, 0x05	; 5
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	60 e2       	ldi	r22, 0x20	; 32
 1f4:	0e 94 c1 00 	call	0x182	; 0x182 <changesomebits>
 1f8:	85 b9       	out	0x05, r24	; 5
	
	return;
	
}
 1fa:	ff 91       	pop	r31
 1fc:	ef 91       	pop	r30
 1fe:	bf 91       	pop	r27
 200:	af 91       	pop	r26
 202:	9f 91       	pop	r25
 204:	8f 91       	pop	r24
 206:	7f 91       	pop	r23
 208:	6f 91       	pop	r22
 20a:	5f 91       	pop	r21
 20c:	4f 91       	pop	r20
 20e:	3f 91       	pop	r19
 210:	2f 91       	pop	r18
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <__vector_16>:
	
	return;
	
}

ISR(TIMER0_OVF_vect){
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
 226:	2f 93       	push	r18
 228:	3f 93       	push	r19
 22a:	4f 93       	push	r20
 22c:	5f 93       	push	r21
 22e:	6f 93       	push	r22
 230:	7f 93       	push	r23
 232:	8f 93       	push	r24
 234:	9f 93       	push	r25
 236:	af 93       	push	r26
 238:	bf 93       	push	r27
 23a:	ef 93       	push	r30
 23c:	ff 93       	push	r31
	TCNT0 = timer0restart; // reiniciamos el MUX
 23e:	85 ef       	ldi	r24, 0xF5	; 245
 240:	86 bd       	out	0x26, r24	; 38
	mux++; //cambiamos el mux
 242:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <mux>
 246:	9f 5f       	subi	r25, 0xFF	; 255
	mux %= 3; //aseguramos que no pasa 3
 248:	8b ea       	ldi	r24, 0xAB	; 171
 24a:	98 9f       	mul	r25, r24
 24c:	81 2d       	mov	r24, r1
 24e:	11 24       	eor	r1, r1
 250:	86 95       	lsr	r24
 252:	28 2f       	mov	r18, r24
 254:	22 0f       	add	r18, r18
 256:	82 0f       	add	r24, r18
 258:	98 1b       	sub	r25, r24
 25a:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <mux>
	
	if (mux == 0x00)
 25e:	91 11       	cpse	r25, r1
 260:	0e c0       	rjmp	.+28     	; 0x27e <__vector_16+0x62>
	{PORTD = tabla7seg[unidades];
 262:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <unidades>
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	e0 50       	subi	r30, 0x00	; 0
 26a:	ff 4f       	sbci	r31, 0xFF	; 255
 26c:	80 81       	ld	r24, Z
 26e:	8b b9       	out	0x0b, r24	; 11
	PORTB = changesomebits(PORTB, 0b00000111, 0x01);} //desplegamos unidades
 270:	85 b1       	in	r24, 0x05	; 5
 272:	41 e0       	ldi	r20, 0x01	; 1
 274:	67 e0       	ldi	r22, 0x07	; 7
 276:	0e 94 c1 00 	call	0x182	; 0x182 <changesomebits>
 27a:	85 b9       	out	0x05, r24	; 5
 27c:	1b c0       	rjmp	.+54     	; 0x2b4 <__vector_16+0x98>
	else if (mux == 0x01)
 27e:	91 30       	cpi	r25, 0x01	; 1
 280:	71 f4       	brne	.+28     	; 0x29e <__vector_16+0x82>
	{PORTD = tabla7seg[decenas];
 282:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <decenas>
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	e0 50       	subi	r30, 0x00	; 0
 28a:	ff 4f       	sbci	r31, 0xFF	; 255
 28c:	80 81       	ld	r24, Z
 28e:	8b b9       	out	0x0b, r24	; 11
	PORTB = changesomebits(PORTB, 0b00000111, 0x02);} //desplegamos decenas
 290:	85 b1       	in	r24, 0x05	; 5
 292:	42 e0       	ldi	r20, 0x02	; 2
 294:	67 e0       	ldi	r22, 0x07	; 7
 296:	0e 94 c1 00 	call	0x182	; 0x182 <changesomebits>
 29a:	85 b9       	out	0x05, r24	; 5
 29c:	0b c0       	rjmp	.+22     	; 0x2b4 <__vector_16+0x98>
	else if (mux == 0x02)
 29e:	92 30       	cpi	r25, 0x02	; 2
 2a0:	49 f4       	brne	.+18     	; 0x2b4 <__vector_16+0x98>
	{PORTD = counter;
 2a2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <counter>
 2a6:	8b b9       	out	0x0b, r24	; 11
	PORTB = changesomebits(PORTB, 0b00000111, 0x04);} //desplegamos el contador
 2a8:	85 b1       	in	r24, 0x05	; 5
 2aa:	44 e0       	ldi	r20, 0x04	; 4
 2ac:	67 e0       	ldi	r22, 0x07	; 7
 2ae:	0e 94 c1 00 	call	0x182	; 0x182 <changesomebits>
 2b2:	85 b9       	out	0x05, r24	; 5
	
	if(debouncetimer != 0) {
 2b4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 2b8:	88 23       	and	r24, r24
 2ba:	19 f0       	breq	.+6      	; 0x2c2 <__vector_16+0xa6>
		debouncetimer--; //Cambiamos el clock de debounce
 2bc:	81 50       	subi	r24, 0x01	; 1
 2be:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	}
	
	TIFR0 |= (1 << TOV0);
 2c2:	85 b3       	in	r24, 0x15	; 21
 2c4:	81 60       	ori	r24, 0x01	; 1
 2c6:	85 bb       	out	0x15, r24	; 21
	return;
}
 2c8:	ff 91       	pop	r31
 2ca:	ef 91       	pop	r30
 2cc:	bf 91       	pop	r27
 2ce:	af 91       	pop	r26
 2d0:	9f 91       	pop	r25
 2d2:	8f 91       	pop	r24
 2d4:	7f 91       	pop	r23
 2d6:	6f 91       	pop	r22
 2d8:	5f 91       	pop	r21
 2da:	4f 91       	pop	r20
 2dc:	3f 91       	pop	r19
 2de:	2f 91       	pop	r18
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <_exit>:
 2ea:	f8 94       	cli

000002ec <__stop_program>:
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <__stop_program>
