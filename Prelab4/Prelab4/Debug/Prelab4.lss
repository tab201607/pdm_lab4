
Prelab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000162  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000782  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006be  00000000  00000000  00000a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000309  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  000013cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d3  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000078  00000000  00000000  00001813  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000188b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 30       	cpi	r26, 0x01	; 1
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  9e:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
const char timer0restart = 200;
char debounceon = 0;

void setup(void)
{
	cli();
  a6:	f8 94       	cli
	
	DDRD = 0xFF; //Colocamos a todo D como salidas
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
  ac:	1b b8       	out	0x0b, r1	; 11
	
	UCSR0B = 0; // Deshablitamos serial en D0 y D1
  ae:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	DDRB = 0x00; //Colocamos a B como entradas, utilizaremos PB2 y PB3
  b2:	14 b8       	out	0x04, r1	; 4
	PORTB = 0x0C; // Habilitamos pullups
  b4:	9c e0       	ldi	r25, 0x0C	; 12
  b6:	95 b9       	out	0x05, r25	; 5
	
	PCICR = 0x01; // Habilitamos pin interrupt en PB2 y PB3
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK0 = 0x0C;
  be:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	
	TCCR0B = 0b00000101; // Le colocamos un prescaler de 1024 a Timer 0 
  c2:	95 e0       	ldi	r25, 0x05	; 5
  c4:	95 bd       	out	0x25, r25	; 37
	TCNT0 = timer0restart;
  c6:	98 ec       	ldi	r25, 0xC8	; 200
  c8:	96 bd       	out	0x26, r25	; 38
	
	TIMSK0 = 0x01; // habilitamos interrupt en TIMR0 overflow
  ca:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	
	sei();
  ce:	78 94       	sei
  d0:	08 95       	ret

000000d2 <main>:
}

int main(void)
{
	setup();
  d2:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	81 ee       	ldi	r24, 0xE1	; 225
  da:	94 e0       	ldi	r25, 0x04	; 4
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0xa>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x14>
  e6:	00 00       	nop
  e8:	f6 cf       	rjmp	.-20     	; 0xd6 <main+0x4>

000000ea <__vector_3>:
    {
		_delay_ms(100);
    }
}

ISR(PCINT0_vect){
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
	
	if ((debounceon & 0x80) == 0b10000000) {return;}
  f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fa:	88 23       	and	r24, r24
  fc:	ac f0       	brlt	.+42     	; 0x128 <__vector_3+0x3e>
	
	if ((PINB & 0b00001100) == 0b00001000) { //Aumentamos si el bit de incrementos esta apachado
  fe:	83 b1       	in	r24, 0x03	; 3
 100:	8c 70       	andi	r24, 0x0C	; 12
 102:	88 30       	cpi	r24, 0x08	; 8
 104:	39 f4       	brne	.+14     	; 0x114 <__vector_3+0x2a>
		PORTD++;
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	8f 5f       	subi	r24, 0xFF	; 255
 10a:	8b b9       	out	0x0b, r24	; 11
		debounceon = 0xFF;
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 112:	0a c0       	rjmp	.+20     	; 0x128 <__vector_3+0x3e>
		//while(PINB = 0xF7); //antirebote
	}
	
	else if ((PINB & 0b00001100) == 0b00000100) {
 114:	83 b1       	in	r24, 0x03	; 3
 116:	8c 70       	andi	r24, 0x0C	; 12
 118:	84 30       	cpi	r24, 0x04	; 4
 11a:	31 f4       	brne	.+12     	; 0x128 <__vector_3+0x3e>
		PORTD--;
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	81 50       	subi	r24, 0x01	; 1
 120:	8b b9       	out	0x0b, r24	; 11
		debounceon = 0xFF;
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	
	
	return;
	
}
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <__vector_16>:

ISR(TIMER0_OVF_vect){
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	8f 93       	push	r24
 TCNT0 = timer0restart;
 140:	88 ec       	ldi	r24, 0xC8	; 200
 142:	86 bd       	out	0x26, r24	; 38
 if((debounceon & 0b10000000) == 0b10000000) {
 144:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 148:	88 23       	and	r24, r24
 14a:	1c f4       	brge	.+6      	; 0x152 <__vector_16+0x1e>
	 debounceon--;
 14c:	81 50       	subi	r24, 0x01	; 1
 14e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 }
 
}
 152:	8f 91       	pop	r24
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
